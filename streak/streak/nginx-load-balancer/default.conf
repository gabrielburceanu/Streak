server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    # ip obtained by cat /etc/resolv.conf in the custom-nginx container
    #resolver 10.96.0.10 ipv6=off;
    #resolver default.svc.cluster.local ipv6=off;

    access_log  /var/log/nginx/host.access.log  main;

#     location /zipkin {
#        proxy_pass http://zipkin-slim:9411;
#     }

    location / {
        if ($http_referer ~* "http://kubernetes.docker.internal/react") {
            rewrite "http://kubernetes.docker.internal/react" $1 break;
            proxy_pass http://react-ui;
            break;
        }
#         if ($http_referer ~* "http://kubernetes.docker.internal/zipkin") {
#             rewrite "http://kubernetes.docker.internal" zipkin/$1 break;
#             proxy_pass http://zipkin-slim:9411;
#             break;
#         }
    }

    error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


# # daemon            off;
# # worker_processes  2;
# # user              www-data;
# #
# # events {
# #     use           epoll;
# #     worker_connections  128;
# # }
# #
# # error_log         logs/error.log info;
# #
# # http {
# #     server_tokens off;
# #     include       mime.types;
# #     charset       utf-8;
# #
# #     access_log    logs/access.log  combined;
# #
# #     server {
# #         server_name   localhost;
# #         listen        127.0.0.1:80;
# #
# #         error_page    500 502 503 504  /50x.html;
# #
# #         location      / {
# # #             if ($http_referer ~* "http://kubernetes.docker.internal/react/") {
# # #                 proxy_pass http://react-ui/;
# # #             }
# # #             if ($http_referer ~* "http://kubernetes.docker.internal/zipkin/") {
# # #                 proxy_pass http://zipkin-slim:9411/zipkin/;
# # #             }
# #             root      html;
# #         }
# #
# #     }
# #
# # }
# user       www www;  ## Default: nobody
# worker_processes  5;  ## Default: 1
# error_log  logs/error.log;
# pid        logs/nginx.pid;
# worker_rlimit_nofile 8192;
#
# events {
#   worker_connections  4096;  ## Default: 1024
# }
#
# http {
#   include    conf/mime.types;
#   include    /etc/nginx/proxy.conf;
#   include    /etc/nginx/fastcgi.conf;
#   index    index.html index.htm index.php;
#
#   default_type application/octet-stream;
#   log_format   main '$remote_addr - $remote_user [$time_local]  $status '
#     '"$request" $body_bytes_sent "$http_referer" '
#     '"$http_user_agent" "$http_x_forwarded_for"';
#   access_log   logs/access.log  main;
#   sendfile     on;
#   tcp_nopush   on;
#   server_names_hash_bucket_size 128; # this seems to be required for some vhosts
#
#   server { # php/fastcgi
#     listen       80;
#     server_name  domain1.com www.domain1.com;
#     access_log   logs/domain1.access.log  main;
#     root         html;
#
#     location ~ \.php$ {
#       fastcgi_pass   127.0.0.1:1025;
#     }
#   }
#
#   server { # simple reverse-proxy
#     listen       80;
#     server_name  domain2.com www.domain2.com;
#     access_log   logs/domain2.access.log  main;
#
#     # serve static files
#     location ~ ^/(images|javascript|js|css|flash|media|static)/  {
# #         if ($http_referer ~* "react") {
# #             proxy_pass http://react-ui;
# #         }
# #         if ($http_referer ~* "zipl") {
# #             proxy_pass http://upstream2;
# #         }
#
#       root    /var/www/virtual/big.server.com/htdocs;
#       expires 30d;
#     }
#
#     # pass requests for dynamic content to rails/turbogears/zope, et al
#     location / {
#       proxy_pass      http://127.0.0.1:8080;
#     }
#   }
#
#   upstream big_server_com {
#     server 127.0.0.3:8000 weight=5;
#     server 127.0.0.3:8001 weight=5;
#     server 192.168.0.1:8000;
#     server 192.168.0.1:8001;
#   }
#
#   server { # simple load balancing
#     listen          80;
#     server_name     big.server.com;
#     access_log      logs/big.server.access.log main;
#
#     location / {
#       proxy_pass      http://big_server_com;
#     }
#   }
# }
# #
# # location / {
# #     ...
# # }
# #
# # upstream upstream1 {
# #     server 10.0.0.1;
# #     server 10.0.0.2;
# #     ...
# # }
# #
# # upstream upstream2 {
# #     server 10.0.0.3;
# #     server 10.0.0.4;
# #     ...
# # }
# #
# #
# #
# #
# #
# #
# # Yes, it is possible to create an nginx container in a Kubernetes cluster that routes requests based on the referral header. Here is an example of how you could achieve this:
# #
# # First, create a deployment for your nginx container. You can do this using the kubectl command-line tool or by defining a Deployment resource in a YAML file.
# #
# # Next, create a service for your nginx deployment. This will allow other pods in the cluster to access the nginx container using a stable IP address and DNS name. You can create a service using the kubectl command-line tool or by defining a Service resource in a YAML file.
# #
# # Configure your nginx container to route requests based on the referral header. To do this, you will need to edit the nginx configuration file (usually located at /etc/nginx/nginx.conf) and include a block of configuration that uses the $http_referer variable to determine which upstream server to route the request to. Here is an example of such a configuration block:
# #
# # Copy code
# #     location / {
# #         if ($http_referer ~* "example.com") {
# #             proxy_pass http://upstream1;
# #         }
# #         if ($http_referer ~* "example.org") {
# #             proxy_pass http://upstream2;
# #         }
# #         ...
# #     }
# # Finally, you will need to define the upstream servers that the nginx container should route requests to. This can be done by defining Upstream blocks in the nginx configuration file. An upstream block specifies a group of servers that can be referenced by name in the proxy_pass directive, like this: